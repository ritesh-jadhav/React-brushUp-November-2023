
Virtual DOM -> plain javascript that deals with object and manipulate them inside DOM.

React.createElement => object => HtmlElement(render)

const heading = React.createElement("h1",{id: "heading"},"React element");

// JSX - Html-likely syntax that understand by JS engine  
// JSX => babel transpile it to React.createElement => ReactElement-JS Object => htmlElement(reder)

const jsxHeading = <h1 id="heading">React JSX element</h1>

const content = <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Commodi labore nisi nobis eligendi illo ea et, dolorem voluptatum alias tempora repellat corrupti numquam officiis ipsam aliquid natus nemo dignissimos tenetur.</p>

// Functional Components 

const about = function (){
    return <h1>This is a functional component</h1>
}

const BrandTitle = () =>{
    return <div className="container">
        {about()}
        <h1 id="heading">React functional Component</h1>
        {content}
        {jsxHeading}
    </div>
}



npm -> Something that manage the dependancies


parcel -> buddler that will wrap up all the things and take that packed pakages towards the production 

# Parcel - A Beast 
    - Dev build
    - local development server 
    - HMR = Hot module replacement
    - uses File waching algorithm written for latest build in c++ 
    - Caching - Faster build (Reduces build time)
    - Tree Shaking - remove unused code
    - Image optimization 
    - compress file and optimize Bundle by removing whitespaces of all js code  
    - Code splitting
    - Consistent hashing 
    - Differential bundle (support for older browsers)
    - Beautify errors and gives diagostic of the app 


dist folder -> parcel will pack all the code inside a package and takes care it should be delivered to the development server
.parce-cache -> cache will used to reduce the build time (time gets reduce as the number of times builds)



npm install -D parcel -> -D will add the dependancies in development environment only (npm install dependancy_name will install and use the common dependancies in both development and production environment )
npx -> command to execute installed node module
npx  parcel index.html -> packe the code and deploy the file on the development server(hosting an application on server)

npx parcel build index.html -> will create a productions ready build (only core files of the application)
    dist\index.html                339 B    1.35s
    dist\index.c9074835.js     139.19 KB    734ms
    dist\index.1e2b8b93.css         65 B     60ms

# package.json
   
    "scripts": {
    "start" : "parcel index.html",  -> to start the project in development (reserved keyword for npm to start something) 
    "build" : "parcel build index.html",  -> to build production package
    "test": "jest"
  }

  PS C:\Users\Ritesh J\OneDrive\Desktop\React-brushUp November 2023> npm start

    > react@1.0.0 start
    > parcel index.html

    Server running at http://localhost:1234
    âœ¨ Built in 1.30s


  "browserlist":[       => For support older browser
    "last 2 versions",
    "fully supports es6"
  ]
==================================================================================================================================
Config Driven UI :: UI is designed in such a way that it should be configured bby the data that backend is sending.
e.g. Different zone have different offers,different cursoal,and the offers....UI can be modified based on what data we configured

2 ways of export 
  -default export -> at the end of file export default module_name_or_variable;
  -named export -> recommended to use when we have to export more than one (at the time of immport destructure and use)
  e.g. 
  
  export const swiggyCdn = "https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/"; //constants.js file
  import { swiggyCdn } from "../utils/constants"; // another.js file

  =================================================================================================================================


  React is faster because of the virtual dom actually for the first time when page gest loaded browser will keep the presentation of all the 
  html nodes in json or xml format. React additionally having its virtual dom and whenever any changes react virtual dom will recognise the 
  changes and updates UI accordingly. react is very fast to manage the DOM manupualtion.
  React reconciliation is nothing but the diff. algorithm that can detect the changes betn old and updated DOM re-render the component. ->same thing known as React fiber in version 16 
  React/angular and other UI framwork is meant up for config driven UI so anything changes at the data layer it can be replicated on UI fastly 
  Data layer and UI is synced and react manages the dom efficiently that makes react much more faster.

============================================================================================================================================
Hooks : hooks are at the end of day are javascript utility functions provided by React developers to enchance the superpowers of react.

useState() => A superpowerful state variable
Whenever state changes of that variable inside a component react will re-render that component using virtual dom.


Normal javascript can't make a component dynamic and can't change the content once page gets loaded. To make component dynamic and capable of
showing updated values on Ui quickly by renrendering the component react introduced state variable.  

import { useState } from "react";


const [list, setList] = useState(default_value_for_state_variable);


equivalent to =>
const ele1 = arr[0];
const ele1 = arr[1];
const test = [arr[0],arr[1]]
const {{arr[0]} ,arr[1] }  // destructuring on the fly

- How useEffect() will update the const variable or state ??
const [varaibleName, setVaribleName] = useEffect(default_value_for_const_variable)
varaibleName => name for the constant variable
setVaribleName => callback function provided by react and that will update the value process component to be re-render with updated value. 

- Whenever state updates react will trigger reconciliation cycle(component re-rendering)

- Why react is fast?
reconciliation algorithm will make react faster an it detect the chanages of virtual dom and manipulate the dom operation efficiently.
=========================================================================================================


Monlithic Vs. Microservices Application

Monolithic -> all the ui,api,db and the services are packed isnide one project and deployed to the internet.
Microservices -> Each service is written as a different project and all combines together to form an application. its also known Seperation of concerns and it follows 
single responsibilty principal and each service has its own job.

Rendering a component  ->
  - useEffect() is a js utility function and re- render the react component.
  - useEffect(){ ()=>{}, [] }  
  two args - 1. callback function : that will called by useEffect() .
           - 2. [] dependancies array : whenever the list of dependancy chanages callback will be called.

 When useEffect is called
 - default nature is to execute whenever redender and having 3 scenarios:
 
 - without dependency array => useEffect(()=>{}) => will execute every time when component is rendered.
 - with dependancy array =>  useEffect(()=>{},[]) => will execute on initial render(just once)
 - with dependancy => useEffect(()=>{},[dependent]) => will execute on updation of dependent

Two ways to api call 
1. as soon as page loads -> call api -> wait for the response for getting content and render the UI.
2. Render the Ui whatever we have ->  api call -> data -> re-render the UI. //gives better UX 

Shimmer UI -> show skelton while loading the page 

Conditional rerendering => rendering a component based on specific condition 

=======================================================================================================================



routes -> requesting a resource 
Routing => enables react to develope dynamic apllication by rendering a component based on the configuration provided.
- can show different Components based on the routes.
reacr-router-dom
import { createBrowserRouter, RouterProvider } from "react-router-dom";

createBrowserRouter([]) => List of objects where each object represents the route configuration.
const router = createBrowserRouter([
  {
    path: "/",
    element: <AppLayout />,
    errorElement: <ErrorPage />,
  },
  {
    path: "/about",
    element: <About />,
  },
  {
    path: "/contact",
    element: <Contact />,
  },
]);
RouterProvider => will gives all of the configuration to the react application.
<RouterProvider router={router}></RouterProvider

- react-router-dom gives a beautiful error page by default for mismatch routes but further it also provides useError() hook for giving additional.

import { useRouteError } from "react-router-dom";
const ErrorPage = () => {
  const err = useRouteError();
  return (
    <div>
      <h1>Oop's something went wrong</h1>
        <h3>{err.status} :: {err.error.message}</h3>
    </div>
  );
};
----------------------------------------------------------------------------------------------------------------------------------------------

nested routing :
 
 - we can nest the routes as we wants by adding childern list in the configuration of createBrowserRouter.
 
 Outlet -> is a component provided by react-router-dom to handle nested routes and selecting the component as route changes.

import { createBrowserRouter, RouterProvider, Outlet } from "react-router-dom";

 const AppLayout = () => (
  <div>
    <div className="container">
      <Header />
      <Outlet />
    </div>
  </div>
);

const router = createBrowserRouter([
  {
    path: "/",
    element: <AppLayout />,
    children: [
      ,
      {
        path: "/",
        element: <Body />,
      },
      {
        path: "/about",
        element: <About />,
      },
      {
        path: "/contact",
        element: <Contact />,
      },
    ],
    errorElement: <ErrorPage />,
  },
]);

2 types of routing in webapp

 - Client side routing => No need to make a network call react will replace the component without refreshing the entire page takes react to work as SPA.

 - Server side routing => take a network call and requset the html page from server and on response load the page.


Link => component provided by react-router-dom to link the route with the components, internally uses anchor tag.

useParam() => hook provided by react-router-dom to fetch the dynamic path of the url.

useRouteError() => can gives error information of the routes. 
================================================================================================================================================

- Class based componenet: palin java class

class Component_name extends React.componenet{
 
  render()  // to render on UI
  {
    return <> </>
  }
}

- passing props :

class Component_name extends React.componenet{
 
 constructor(props){
    super(props) // will call constructor of React.componenet and mount the props
  }
  render()  // to render on UI
  {
    return <> </>
  }
}
note : in class based components props are accessed via keyword 

- creating state varaible 
state variables are create while instantiate the object.
we always create state variable inside constructor with state and this keyword.

constructor(props) {
    super(props);

    this.state = {
      //this object contains the list of state variable 
    };
  }

- Updating state variable 
 <button
          onClick={() => {
            this.setState({
              count: this.state.count + 1,
            });
          }}
        >
          Increase count
  </button>
whenever state variable updates, react will trigger reconciliation(re-render) and finds the differece of values and update the state. 
-this.setState() require the object which having updated values and while updating the state variable only updated values are udpated without touching rest of the values.

- Component lifecycle

Mount/Render -> the process of loading componenet into the browser's DOM.
lifecycle methods executes on instantiation of class.

render() -> returns piece of JSX code.
constructor() -> to pass the props and handling state management.
componentDidMount() -> useful for api calls.

- why api calls always inside componentDidMount()?
-> to fetch the data, internally render() method will executes before componentDidMount() and in render method we will render the 
component with the content we have and after that will load the data into component.

-Order of execution for component without child
constructor -> render() -> componentDidMount

-Order of execution for component with one child
parent-constructor
parent-render
child-constructor
child-render
child-component-did-mount
parent-component-did-mount

lifecycle methods follows parent-child relationship.

- Order of execution if componenet having multiple childs

parent constructor
parent render

first constructor
first render

second constructor
second render

<single-batch : DOM Update>
first component-did-mount
second component-did-mount
parent component-did-mount

React is having two states to mount a componenet inside dom 
- Render stage -> constructor and render() will executes 
- Commit stage -> once render stage is completed dom is getting updated and react will optimize the componenet mounting by 
                batching up componentDidMount() together and perform dom operation in single go that makes react very faster.

componentWillUnmount() -> will executes when component is unmounting (detached from html)
componenetDidUpdate () -> will execute when react trigeers re-rendera and updating virtual dom.

- Three stages 
  -Mount -> constructor and render will execute 
  -Update -> find diff and update dom.on change of props,state,forceUpdate again render will executes 
  -Unmount ->  umounting from dom

React lifecycle diagram :: https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
===============================================================================================================================================

Benifits of Single responsibilty pattern ::
  - Modularize code 
  - Testable and maintainable code
  - Easy to tarck and trace the issue 
  - Helps in debugging

=====================================================================================================================================
Custom hook -> simple utility javascript function/helper function

By creating custom hook we can seperate the responsibility.

Use case : can seperate fetching logic from the component so component will responsible for only rendering data on UI.

Optimization :

By default budler wrap all the code together in one html,js,css file and loads these files forms the application inside the browser.
but in large apllication may one componenet having thousands of child and that can be loaded irrespective of their need.

lazy loading -> on demand code populates i.e. when we goes to specific component only that time the code will loaded inside the 
              browser that will optimize the app in better way and can reduce the bundle size.

import React, { lazy, Suspense } from "react";

const Grocery = lazy(() => import("./components/Grocery")); //callback function that will call import function (not module its function for lazy)
that takes the path from where componenet is coming.

Whenever we need componenet gets load lazyly the componenet should be wrapped inside the Suspense.

<Suspense> -> provided by react library having capability to load componenet laziely. able to inject code dynamically inside existing code.
fallback -> attribute that can used by react while componenet is loading react needs something to renedr on screen expect JSX.


{
  path: "/grocery",
  element: (
    <Suspense fallback={<h1>Loading</h1>}>
      <Grocery />
    </Suspense>
  ),
}


lazy loding acronyms -> 
  Chunnkking 
  Code splitting
  Dynamic import
  Dynamic Bundling
  on demand loading
===========================================================================================================================================

Higher order Component -> a normal js utility function that accept the component and returns the component with the enchanment/modification.

Controlled componenet -> a state can be managed by its parent or rendering of the component controlled by its parent.
Uncontrolled component -> a state and rendering managed by component itself.


Lifting state up -> updating the state of the parent by its child (not possible directly but indirectly we can do it) via props drilling 

Props drilling -> passing the props down to the nested children in componenet tree hirarchy.

Problem with props drilling -> multiple nesting is not the good way to passing the props from every componenet waste of use.

React context -> A Global storage area for the data so any componenet can tap to global storage area and can access the data where it needed.
  
  1. Creating context : createContext() -> simple utility js function provided by react library that holds an object and that object contains the central data.

  import { createContext } from "react";

  const UserContext = createContext({
    loggedinUser : "default user"
    }) 
 
  export default UserContext;
-----------------------------------   Consuming context   -----------------------------
  2. Consuming / Using the Context : useContext() -> hook provided by react that takes a context as a parameter.
    - Functional componenet
    

    const {loggedinUser} = useContext(UserContext);

  - Class-based component :
    hooks are not allowded in class based componenet but react provides a special componenet to consume the context  -> JSX -> callback function that contains actual data 
    
        <UserContext.Consumer>
          {(data) => <h1>{data.loggedinUser}</h1> }
        </UserContext.Consumer>
  
      react will taking care of providing context data to the callback.

---------------------------------   Providing Context   ------------------------------------

<contextName.provider value={ }>
  ** only components  that are in between context provider have access the context value**
</contextName.provider>

e.g. 
 //default value of context 
<UserContext.Provider value={{ loggedinUser: userName }}>
//userName
    <div className="app">
      <UserContext.Provider value={{ loggedinUser: "Elon Musk" }}>
      //Elon Musk
        <Header />
      </UserContext.Provider>
      <Outlet />
    </div>
</UserContext.Provider>
===================================================================================================================================
Redux -> a predictible state container library 
Redux team will provide 2 liberaries - React-Redux and Redux ToolKit(RTK)

Redux Toolkit is a modern way to use redux.
  ToolKit is minimizing the boiler plate code, configuration of redux and avoid a lot packages to get redux into the application.

zustand is an alternative for redux and lot of peoples using this.

Architecture
  Store -> a huge js object consist of a lot of data and kept into global storage of data layer so any componenet can access it.
  Slices -> Logical piece of the data i.e. logical data sepration 

Whenever we need to add/update something inside the redux we cannot directly modify. for doing this, we have to "dispatch an (Action)"  it will trigger the function
and that function internally modify the "slice" of the redux store .that function is called as "reducer".

Whenever we need to read data from the store we use "selector". selector is subscribing the store to the componenet so as soon as data updated inside slice of the store 
and component will get the same from the store.